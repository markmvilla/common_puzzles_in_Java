//33 consecutive duplicates
//1: use count array, O(n) time with O(n) space
//2: use actual_sum - should_be_sum O(n) with O(1) space
//39 two egg problem
//1: this is a triangular series, n/2*(n+1) >= 100
//12
//O(lg n)
//13
//recursive binary search O(lg n) time, O(n) space because the call stack and done in-place
//iterative binary search O(lg n) time, O(1) since done in-place and no call stack
public static int rotationSearchDict(String[] dict, int startIndex, int endIndex) {
  //floats get floored "toward" zero so rotation will be midIndex+1
  int midIndex = (startIndex + endIndex) / 2;
  if (startIndex == midIndex) {
   return midIndex + 1;
  } else if (dict[startIndex].compareTo(dict[midIndex]) > 0) {
   return rotationSearchDict(dict, startIndex, midIndex);
  } else {
   return rotationSearchDict(dict, midIndex, endIndex);
  }
 }
 //40
 //hashmap search O(n) time, O(n) space
 //count array O(n) time, O(n) space
